{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["secondsToTimer","timer","seconds","Math","round","minutes","floor","toString","padStart","boxHeight","boxWidth","tempCount","tempRatio","tempCeil","App","useState","timerStart","setTimerStart","setTimer","rows","setRows","firstCrack","setFirstCrack","timerEnd","setTimerEnd","updateRow","index","key","value","useEffect","setInterval","Date","now","currentTime","inputRef","createRef","className","class","onSubmit","e","row","preventDefault","time","length","temp","current","for","id","ref","name","pattern","required","type","viewBox","fill","stroke","points","map","join","range","riseFloor","Array","_","x","y","riseCeil","editTemp","onMouseEnter","onMouseLeave","onChange","test","target","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.094e3628.chunk.js","sourcesContent":["import './App.css';\nimport { useEffect, useState, createRef } from 'react';\n\nconst secondsToTimer = (timer) => {\n  const seconds = Math.round(timer) % 60;\n  const minutes = Math.floor(timer / 60)\n  return `${Math.round(minutes).toString().padStart(2, \"0\")}:${Math.round(seconds).toString().padStart(2, \"0\")}`;\n}\n\nconst boxHeight = 300\nconst boxWidth = 500\n\nconst tempFloor = 180\nconst tempCeil = 440\nconst tempCount = 10\nconst tempRange = tempCeil - tempFloor\nconst tempRatio = boxHeight / tempRange\n\nconst riseFloor = 0\nconst riseCeil = 25\nconst riseRange = riseCeil - riseFloor\nconst riseRatio = boxHeight / riseRange\n\nfunction App() {\n  const [timerStart, setTimerStart] = useState(false);\n  const [timer, setTimer] = useState(false);\n  const [rows, setRows] = useState([])\n  const [firstCrack, setFirstCrack] = useState()\n  const [timerEnd, setTimerEnd] = useState();\n  const addRow = (row) => setRows([...rows, row])\n  const updateRow = (index, key, value) => {\n    rows[index] = {\n      ...rows[index],\n      [key]: value\n    }\n    setRows([...rows])\n  }\n\n  useEffect(() => {\n    if (!timerStart || timerEnd) return;\n    setInterval(() => {\n      setTimer(Date.now() / 1000 - timerStart);\n    }, 1000);\n  }, [timerStart, timerEnd])\n  const currentTime = secondsToTimer(timer)\n  const inputRef = createRef()\n  return (\n    <div className=\"App\">\n      {!timerStart ?\n        <button type=\"button\" onClick={() => setTimerStart(Date.now() / 1000)}>\n          Start Roast\n        </button>\n        : <div>\n          <h2>{timerEnd ? `End Time: ${secondsToTimer(timerEnd - timerStart)}` : `Current Time: ${currentTime}`}</h2>\n          <div class=\"grid\">\n            {!timerEnd &&\n              <form\n                className=\"set-temp\"\n                onSubmit={(e) => {\n                  e.preventDefault();\n                  addRow({\n                    time: rows.length * 30 + 30,\n                    temp: inputRef.current.value,\n                  })\n                  inputRef.current.value = \"\"\n                }\n                }>\n                <div>\n                  <label for=\"temp\">Set Temperature at {secondsToTimer(rows.length * 30 + 30)}</label><input id=\"temp\" ref={inputRef} name=\"temp\" pattern=\"^[0-9]+$\" required />\n                </div>\n                <button type=\"submit\">Submit</button>\n              </form>\n            }\n            <svg viewBox={`0 0 ${boxWidth} ${boxHeight}`} class=\"chart\">\n              <polyline\n                fill=\"none\"\n                stroke=\"red\"\n                stroke-width=\"3\"\n                points={'\\n' + rows.map(({ temp, time }) => `${boxWidth / 15 * (time / 60)},${temp * tempRatio * -1 + tempFloor * tempRatio + boxHeight}`).join('\\n')}\n              />\n              <polyline\n                fill=\"none\"\n                stroke=\"blue\"\n                stroke-width=\"3\"\n                points={'\\n' + rows.map(({ temp, time }, index) => {\n                  const range = index === 0 ? 0 : temp - rows[index - 1].temp\n                  return `${boxWidth / 15 * (time / 60)},${range * riseRatio * -1 + riseFloor * riseRatio + boxHeight}`\n                }).join('\\n')}\n              />\n              {new Array(tempCount).fill(0).map((_, index) => <text x=\"5\" y={boxHeight - index * ((boxHeight + boxHeight / tempCount - 5) / tempCount)} font-size=\"8\">{Math.round(index * (tempRange / (tempCount - 1))) + tempFloor}F</text>)}\n              {new Array(tempCount).fill(0).map((_, index) => <text x=\"480\" y={boxHeight - index * ((boxHeight + boxHeight / tempCount - 5) / tempCount)} font-size=\"8\">{Math.round(index * (riseRange / (tempCount - 1)))}</text>)}\n              {new Array(14).fill().map((_, index) => <text x={boxWidth / 15 * (index + 1)} y=\"300\" font-size=\"8\">{index + 1}</text>)}\n            </svg>\n            <div class=\"table\">\n              <table>\n                <thead>\n                  <tr>\n                    <th>Time</th>\n                    <th>Temperature</th>\n                    <th>Rate of Rise</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {rows.map(({ time, temp, editTemp }, index) => <tr>\n                    <td>{secondsToTimer(time)}</td>\n                    <td\n                      onMouseEnter={() => updateRow(index, 'editTemp', true)}\n                      onMouseLeave={() => updateRow(index, 'editTemp', false)}>\n                      {editTemp ? <input onChange={(e) => {\n                        if (!/^[0-9]+$/.test(e.target.value)) return\n                        updateRow(index, 'temp', e.target.value)\n                      }} value={temp} /> : temp}\n                    </td>\n                    <td>{index === 0 ? '-' : temp - rows[index - 1].temp}</td>\n                  </tr>)}\n                </tbody>\n              </table>\n            </div>\n            <div class=\"development\">\n              <h2>Development</h2>\n              {!firstCrack ?\n                <button type=\"button\" onClick={() => setFirstCrack(Date.now() / 1000 - timerStart)}>Set first crack at {currentTime}</button>\n                : <div>\n                  First Crack: {secondsToTimer(firstCrack)}<br />\n                  Development Percent: {Math.round((((timerEnd || Date.now() / 1000) - timerStart - firstCrack) / firstCrack) * 100)}%<br />\n                  {!timerEnd && <button type=\"button\" onClick={() => setTimerEnd(Date.now() / 1000)}>STOP</button>}\n                </div>}\n            </div>\n          </div>\n        </div>}\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}